<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>大模型 on KingdeGuo&#39;s Blog</title>
    <link>http://localhost:49666/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8B/</link>
    <description>Recent content in 大模型 on KingdeGuo&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 01 Oct 2025 17:10:00 +0800</lastBuildDate>
    <atom:link href="http://localhost:49666/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>大模型到底改变了什么？</title>
      <link>http://localhost:49666/2025/10/01/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%88%B0%E5%BA%95%E6%94%B9%E5%8F%98%E4%BA%86%E4%BB%80%E4%B9%88/</link>
      <pubDate>Wed, 01 Oct 2025 17:10:00 +0800</pubDate>
      <guid>http://localhost:49666/2025/10/01/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%88%B0%E5%BA%95%E6%94%B9%E5%8F%98%E4%BA%86%E4%BB%80%E4%B9%88/</guid>
      <description>&lt;h1 id=&#34;大模型到底改变了什么&#34;&gt;大模型到底改变了什么？&lt;/h1&gt;&#xA;&lt;p&gt;最近我常常在想一个问题：大模型到底改变了什么？&lt;/p&gt;&#xA;&lt;p&gt;有时候，我觉得它带来的冲击比表面看到的还要大。以前我们做事，总有一种&amp;quot;节奏感&amp;quot;。比如一个方案要几天准备，一个流程要几周走完，一个文档要一个人慢慢写。时间和空间像是一种自然约束，每个人都被它框住。&lt;/p&gt;&#xA;&lt;p&gt;可大模型出现后，很多节奏突然被打乱了。它能在几分钟里生成一份初稿，能同时处理多个任务，能让原本需要排队、等待、反复确认的事情瞬间推进。以前那种&amp;quot;必须花时间消耗&amp;quot;的逻辑，好像被改写了。&lt;/p&gt;&#xA;&lt;p&gt;这让我想起一句话：尼采说&amp;quot;上帝死了&amp;quot;，意味着旧的秩序崩塌，人必须重新面对世界。而大模型的出现，也像是在提醒我们：很多旧的秩序被抹平了，我们得重新去思考。&lt;/p&gt;&#xA;&lt;p&gt;在工作里，我已经真切感受到这种变化。过去，一个项目提案要靠几个人反复讨论、磨合、再定稿；现在，我自己先丢给模型跑一版资料，立刻就能拿到一个方向，再带着成果和大家讨论，节奏完全不同了。过去，写一封正式的邮件要反复斟酌用词；现在，模型能帮我先列一个框架，我只需要根据场景润色。那种&amp;quot;节奏感&amp;quot;，真的被重构了。&lt;/p&gt;&#xA;&lt;p&gt;我有时候甚至会有点震惊：原本我们以为不可替代的流程、不可压缩的时间，现在突然都变得松动了。这让我不得不重新思考：如果效率不再是瓶颈，那我们该怎么定义自己的价值？如果机器能并行处理一切&amp;quot;可量化&amp;quot;的工作，那我们作为人，还能贡献什么？&lt;/p&gt;&#xA;&lt;p&gt;这些问题我现在还没有答案。但我能确定的是，大模型不是在帮我们省点时间这么简单，而是把我们对&amp;quot;时间、空间和工作节奏&amp;quot;的理解彻底翻了一遍。&lt;/p&gt;&#xA;&lt;p&gt;它让我意识到，我们已经站在一个新的门槛上。很多事情，需要我们重新去看，重新去理解。&lt;/p&gt;</description>
    </item>
    <item>
      <title>专注与心流</title>
      <link>http://localhost:49666/2025/09/25/%E4%B8%93%E6%B3%A8%E4%B8%8E%E5%BF%83%E6%B5%81/</link>
      <pubDate>Thu, 25 Sep 2025 22:46:00 +0800</pubDate>
      <guid>http://localhost:49666/2025/09/25/%E4%B8%93%E6%B3%A8%E4%B8%8E%E5%BF%83%E6%B5%81/</guid>
      <description>&lt;h1 id=&#34;专注与心流&#34;&gt;专注与心流&lt;/h1&gt;&#xA;&lt;p&gt;之前，我了解过&amp;quot;心流&amp;quot;这个概念——一种完全沉浸在某件事上的状态，让人感到时间流动不同，思路异常清晰，同时伴随一种愉悦感和自我价值的体验。最初，我以为心流只是写代码、做设计时才会出现的特殊状态，但慢慢发现，它可以存在于任何需要专注的场景：读书、写笔记、整理资料，甚至规划一天的工作。&lt;/p&gt;&#xA;&lt;p&gt;我自己也尝试过各种方法去&amp;quot;触发&amp;quot;心流。有时候只是一杯咖啡，一种简单的仪式感，让我稍微调整状态，开始专注。奇妙的是，这种微小的动作并不是关键本身，而是它帮我明确了&amp;quot;现在是进入专注的时刻&amp;quot;。一旦专注起来，时间感变得灵活，思路变得清晰，完成任务的过程本身也变成了一种愉悦的体验，好像在实现自己价值的同时，也在享受这个过程。&lt;/p&gt;&#xA;&lt;p&gt;最近大模型特别火，大家在网上讨论时，我注意到一个现象：有的人说使用 AI 之后，反而更难进入心流。原因很直观——工具越便利，决策和执行的节奏被打断的可能性就越高。当每一步都可以快速得到答案，你会不自觉地分散注意力，失去了那种全身心投入的深度体验。我自己也尝试在工作中观察这个现象：在查资料、生成文本或者做思维整理时，如果过度依赖工具，脑子总是跳来跳去，很难进入长时间的专注状态。&lt;/p&gt;&#xA;&lt;p&gt;这让我开始思考：心流并不是为了效率而效率，它是一种对自己思维的掌控感，是一种参与感。大模型的存在并不矛盾，只是提醒我们在使用工具时，需要给自己留一些&amp;quot;独自探索&amp;quot;的空间，让思考和操作的节奏可控。当你清楚哪些事情需要靠自己深入思考，哪些可以借助工具完成，就能更容易进入心流，同时保持愉悦感。&lt;/p&gt;&#xA;&lt;p&gt;慢慢发现，心流其实并不神秘。每一次全身心投入，无论是写笔记、阅读，还是整理思路，都是在和自己对话。你会感觉时间流动得不一样，思路也异常清晰。关键是，当你意识到这一点，你就会自然而然地去安排自己的工作和学习，让心流不只是偶尔的灵光，而是一种可以持续的专注状态。它不是任务，而是自己享受思考和创作的方式。&lt;/p&gt;</description>
    </item>
    <item>
      <title>复盘与思维链</title>
      <link>http://localhost:49666/2025/09/20/%E5%A4%8D%E7%9B%98%E4%B8%8E%E6%80%9D%E7%BB%B4%E9%93%BE/</link>
      <pubDate>Sat, 20 Sep 2025 23:12:00 +0800</pubDate>
      <guid>http://localhost:49666/2025/09/20/%E5%A4%8D%E7%9B%98%E4%B8%8E%E6%80%9D%E7%BB%B4%E9%93%BE/</guid>
      <description>&lt;h1 id=&#34;复盘与思维链&#34;&gt;复盘与思维链&lt;/h1&gt;&#xA;&lt;p&gt;最近我一直在思考一个问题：复盘到底值不值得花时间去做？很多人只在失败后才复盘，甚至觉得这也勉强。但慢慢地，我发现，无论成功还是失败，复盘都是在为自己搭建一条思维链。简单说，复盘不仅是回顾过去，更是梳理逻辑、理清因果，让下一步行动更从容的方式。&lt;/p&gt;&#xA;&lt;p&gt;复盘之所以重要，是因为我们的决策和行为总是在复杂环境中进行的。环境变化快、信息碎片多，单靠直觉和经验，很容易重复错误，或者错失机会。如果能把每一次决策、每个行动节点都理顺，就能把零散的经验串联成一条清晰的逻辑链，让自己慢慢学会在复杂中找到路径。这不仅是能力的积累，更是一种思维方式的训练。&lt;/p&gt;&#xA;&lt;p&gt;最近我看到不少人尝试用大模型辅助复盘，这让我觉得很有意思。比如在写方案、做数据分析或设计流程时，通过模型模拟不同场景、预测可能结果，你可以更直观地看到决策的潜在影响。这其实是在用环境模拟，把复盘从单纯回顾变成了&amp;quot;预演&amp;quot;，让思维链更完整。正如雷军所说，成功的经验也需要总结，否则只会随着时间消散。把复盘和思维链结合，无论成功还是失败的案例，都能成为下一次行动的参考。&lt;/p&gt;&#xA;&lt;p&gt;在实际操作中，我慢慢形成了自己的方法：先梳理事件全貌，写下每个关键决策和背后的理由；再分析结果和影响，把关键因果关系画出来；最后思考，如果再遇到类似情况，有哪些选择和优化空间。每一次复盘，都会在脑海里生成一条思维链，让经验变得可触可用。久而久之，当面对新问题时，你不再完全依赖直觉，而是有一条逻辑可以参考，内心也多了一份从容和主动。&lt;/p&gt;&#xA;&lt;p&gt;慢慢地，我意识到，复盘不仅是回顾过去的工具，更是一种与自己对话的方式。它让零散的经验理成链条，让每一次行动都有迹可循，每一次尝试都在为未来积累能量。复盘与思维链，是在复杂环境中为自己画出的&amp;quot;心中地图&amp;quot;，让你在面对不确定时，依然能找到方向，感受到掌控感和自由感。&lt;/p&gt;</description>
    </item>
    <item>
      <title>技能进步了，还是技巧进步了</title>
      <link>http://localhost:49666/2025/09/12/%E6%8A%80%E8%83%BD%E8%BF%9B%E6%AD%A5%E4%BA%86%E8%BF%98%E6%98%AF%E6%8A%80%E5%B7%A7%E8%BF%9B%E6%AD%A5%E4%BA%86/</link>
      <pubDate>Fri, 12 Sep 2025 20:22:00 +0800</pubDate>
      <guid>http://localhost:49666/2025/09/12/%E6%8A%80%E8%83%BD%E8%BF%9B%E6%AD%A5%E4%BA%86%E8%BF%98%E6%98%AF%E6%8A%80%E5%B7%A7%E8%BF%9B%E6%AD%A5%E4%BA%86/</guid>
      <description>&lt;h1 id=&#34;技能进步了还是技巧进步了&#34;&gt;技能进步了，还是技巧进步了&lt;/h1&gt;&#xA;&lt;p&gt;九月，翻开年初的清单。那些被划掉的条目，看上去很干脆，可心里还是忍不住打个问号：这算进步吗？还是只是靠一些小聪明，把任务勉强敷衍过去？&lt;/p&gt;&#xA;&lt;p&gt;很多时候都清楚，优化没有尽头。可是在路上，总会遇到诱人的捷径，deadline逼着人低头，ROI的计算让人动摇。一旦顺从，这些捷径就变成了短暂的安慰，换一个场景立刻失效。&lt;/p&gt;&#xA;&lt;p&gt;真正的进步，大概不是清单上多了几道划痕，而是自己心里多了一些沉淀。比如遇到类似的问题时，能想起上一次踩过的坑，能把过去的经验拿出来复用。就像一个循环：计划、执行、检查、行动。每一次走完，都能留下新的参照点，让下一次走路的时候，方向更清晰，脚步也更稳。这样的积累，才是真正往前迈出的一步。&lt;/p&gt;&#xA;&lt;p&gt;而那些只会&amp;quot;粉饰数字&amp;quot;的小技巧，看着热闹，其实空心。换一个目标就原形毕露。&lt;/p&gt;&#xA;&lt;p&gt;今年大模型火得很厉害，几乎所有人都在谈论它。可它最终会走向哪里，现在没有人能说得准。也许是彻底的改变，也许只是昙花一现。能做的，或许就是保持一点怀疑，把注意力放在那些不会轻易过时的东西上：逻辑、原理、思维方式。&lt;/p&gt;&#xA;&lt;p&gt;三个月，不算长，但也够用。清单会慢慢消失，勾掉的痕迹也会淡掉，可那些真正留下来的能力，会在下一个循环里继续发挥作用。清单可以划掉，可路还在前面。&lt;/p&gt;</description>
    </item>
    <item>
      <title>面向 scaling 编程</title>
      <link>http://localhost:49666/2025/09/05/%E9%9D%A2%E5%90%91-scaling-%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Fri, 05 Sep 2025 22:27:00 +0800</pubDate>
      <guid>http://localhost:49666/2025/09/05/%E9%9D%A2%E5%90%91-scaling-%E7%BC%96%E7%A8%8B/</guid>
      <description>&lt;h1 id=&#34;面向-scaling-编程&#34;&gt;面向 scaling 编程&lt;/h1&gt;&#xA;&lt;p&gt;最近脑子里一直在盘旋着一个观点，所有的设计模式归根结底都是面向scaling编程。&lt;/p&gt;&#xA;&lt;p&gt;最近观察大模型的发展，我深刻意识到一个规律：系统的真正能力往往来源于 scaling，而不仅仅是局部优化。大模型通过算力、参数和数据的持续扩展，才能涌现出复杂的能力和行为。这让我重新审视软件工程和业务研发中的那些&amp;quot;可扩展、可维护、解耦、复用&amp;quot;等目标——表面上看似不同的追求，归根结底都是为系统在规模和复杂度增长时仍能稳定演进而设计。&lt;/p&gt;&#xA;&lt;p&gt;软件从来不是静态的，它会随着业务扩张而膨胀。单机架构到分布式，再到微服务拆分，每一次演进都是在应对规模增长带来的压力；模块化、接口抽象、数据治理、领域建模，则是为团队扩张和业务多线发展预留空间。即便是业务研发流程、需求评审、协作规范，也都是为 scaling 做准备，保证系统和团队在复杂度上升时不至于失控。大模型给我的启发是：当增长到一定阈值后，原本看似微小的设计选择，都会被放大，系统的可演化能力才是真正的核心竞争力。&lt;/p&gt;&#xA;&lt;p&gt;接受了这个观点后，我在日常研发中思考问题的方式也发生了变化。过去我更关注眼前需求和局部优雅，而现在我会先问：如果用户量或功能点增长十倍，代码还能撑住吗？接口和模块的边界设计是否足够稳健？即便是一个小功能，我也会优先考虑它在未来扩展中的弹性。这并非过度设计，而是让系统在初期就为 scaling 留下余地，让代码不仅解决今天的问题，也能支撑明天的增长。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
